using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace analisis
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[,] matriz = new int[,] {
                 // A-Z   0-9     _     .      E       '      -      EOF     EOL     "        +        =        *        /      <        >        %         ^         (         )         [         ]         {         }         ,         ;         N       O       Y      O.C   EsB
                  // 0     1      2     3      4       5      6      7       8       9        10       11       12       13     14       15       16        17        18        19        20        21        22        23        24        25        26      27      28     29    30
            /* 00 */ {1 ,  4  ,  -7  ,  23  ,  1   ,   11  ,  19  ,  0   ,   0   ,   13   ,   15   ,   20   ,   28   ,   16  ,  21   ,   22   ,   111   ,   110   ,   130   ,   131   ,   132   ,   133   ,   134   ,   135   ,   128   ,   129   ,   1   ,   1   ,   1   ,  -6,    0},
            /* 01 */ {1 ,  1  ,   2  ,  101 ,  101 ,   101 ,  101 ,  101 ,   101 ,   101  ,   101  ,   101  ,   101  ,   101 ,  101  ,   101  ,   101   ,   101   ,   101   ,   101   ,   101   ,   101   ,   101   ,   101   ,   101   ,   101   ,   101 ,   101 ,   101 , 101,  101},
            /* 02 */ {3 ,  3  ,   2  ,  -1  ,  -1  ,   -1  ,  -1  ,  -1  ,   -1  ,   -1   ,   -1   ,   -1   ,   -1   ,   -1  ,  -1   ,   -1   ,   -1    ,   -1    ,   -1    ,   -1    ,   -1    ,   -1    ,   -1    ,   -1    ,   -1    ,   -1    ,   -1  ,   -1  ,   -1  ,  -1,   -1},
            /* 03 */ {3 ,  3  ,   2  ,  101 ,  101 ,   101 ,  101 ,  101 ,   101 ,   101  ,   101  ,   101  ,   101  ,   101 ,  101  ,   101  ,   101   ,   101   ,   101   ,   101   ,   101   ,   101   ,   101   ,   101   ,   101   ,   101   ,   101 ,   101 ,   101 , 101,  101},
            /* 04 */ {102, 4  ,   102,  5   ,  7   ,   102 ,  102 ,  102 ,   102 ,   102  ,   102  ,   102  ,   102  ,   102 ,  102  ,   102  ,   102   ,   102   ,   102   ,   102   ,   102   ,   102   ,   102   ,   102   ,   102   ,   102   ,   102 ,   102 ,   102 , 102,  102},
            /* 05 */ {-2,  6  ,   -2 ,  -2  ,  -2  ,   -2  ,  -2  ,  -2  ,   -2  ,   -2   ,   -2   ,   -2   ,   -2   ,   -2  ,  -2   ,   -2   ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2  ,   -2  ,   -2  ,  -2,   -2},
            /* 06 */ {103, 6  ,   103,  103 ,  103 ,   103 ,  103 ,  103 ,   103 ,   103  ,   103  ,   103  ,   103  ,   103 ,  103  ,   103  ,   103   ,   103   ,   103   ,   103   ,   103   ,   103   ,   103   ,   103   ,   103   ,   103   ,   103 ,   103 ,   103 , 103,  103},
            /* 07 */ {-2 , 9  ,   8  ,  -2  ,  -2  ,   -2  ,  -2  ,  -2  ,   -2  ,   -2   ,   -2   ,   -2   ,   -2   ,   -2  ,  -2   ,   -2   ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2  ,   -2  ,   -2  ,  -2,   -2},
            /* 08 */ {-2 , 10 ,   -2 ,  -2  ,  -2  ,   -2  ,  -2  ,  -2  ,   -2  ,   -2   ,   -2   ,   -2   ,   -2   ,   -2  ,  -2   ,   -2   ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2    ,   -2  ,   -2  ,   -2  ,  -2,   -2},
            /* 09 */ {102, 9  ,   102,  102 ,  102 ,   102 ,  102 ,  102 ,   102 ,   102  ,   102  ,   102  ,   102  ,   102 ,  102  ,   102  ,   102   ,   102   ,   102   ,   102   ,   102   ,   102   ,   102   ,   102   ,   102   ,   102   ,   102 ,   102 ,   102 , 102,   102},
            /* 10 */ {103, 10 ,   103,  103 ,  103 ,   103 ,  103 ,  103 ,   103 ,   103  ,   103  ,   103  ,   103  ,   103 ,  103  ,   103  ,   103   ,   103   ,   103   ,   103   ,   103   ,   103   ,   103   ,   103   ,   103   ,   103   ,   103 ,   103 ,   103 , 103,   103},
            /* 11 */ {12 , 12 ,   12 ,  12  ,  12  ,   104 ,  12  ,  -3  ,   -3  ,   12   ,   12   ,   12   ,   12   ,   12  ,  12   ,   12   ,   12    ,   12    ,   12    ,   12    ,   12    ,   12    ,   12    ,   12    ,   12    ,   12    ,   12  ,   12  ,   12  ,  12,    12},
            /* 12 */ {-3 , -3 ,   -3 ,  -3  ,  -3  ,   104 ,  -3  ,  -3  ,   -3  ,   -3   ,   -3   ,   -3   ,   -3   ,   -3  ,  -3   ,   -3   ,   -3    ,   -3    ,   -3    ,   -3    ,   -3    ,   -3    ,   -3    ,   -3    ,   -3    ,   -3    ,   -3  ,   -3  ,   -3  ,  -3,    -3},
            /* 13 */ {14 , 14 ,   14 ,  14  ,  14  ,   14  ,  14  ,  -4  ,   -4  ,   105  ,   14   ,   14   ,   14   ,   14  , 14    ,   14   ,   14    ,   14    ,   14    ,   14    ,   14    ,   14    ,   14    ,   14    ,   14    ,   14    ,   14  ,   14  ,   14  ,  14,    14},
            /* 14 */ {14 , 14 ,   14 ,  14  ,  14  ,   14  ,  14  ,  -4  ,   -4  ,   105  ,   14   ,   14   ,   14   ,   14  , 14    ,   14   ,   14    ,   14    ,   14    ,   14    ,   14    ,   14    ,   14    ,   14    ,   14    ,   14    ,   14  ,   14  ,   14  ,  14,    14},
            /* 15 */ {106, 106,   106,  106 ,  106 ,   106 ,  106 ,  106 ,   106 ,   106  ,   112  ,   115  ,   106  ,   106 , 106   ,   106  ,   106   ,   106   ,   106   ,   106   ,   106   ,   106   ,   106   ,   106   ,   106   ,   106   ,   106 ,   106 ,   106 , 106,   106},
            /* 16 */ {109, 109,   109,  109 ,  109 ,   109 ,  109 ,  109 ,   109 ,   109  ,   109  ,   118  ,   17   ,   136 , 109   ,   109  ,   109   ,   109   ,   109   ,   109   ,   109   ,   109   ,   109   ,   109   ,   109   ,   109   ,   109 ,   109 ,   109 , 109,   109},
            /* 17 */ {17 , 17 ,   17 ,  17  ,  17  ,   17  ,  17  ,  17  ,   -5  ,   17   ,   17   ,   17   ,   18   ,   17  , 17    ,   17   ,   17    ,   17    ,   17    ,   17    ,   17    ,   17    ,   17    ,   17    ,   17    ,   17    ,   17  ,   17  ,   17  ,  17,    17},
            /* 18 */ {17 , 17 ,   17 ,  17  ,  17  ,   17  ,  17  ,  17  ,   -5  ,   17   ,   17   ,   17   ,   17   ,   137  , 17    ,   17   ,   17    ,   17    ,   17    ,   17    ,   17    ,   17    ,   17    ,   17    ,   17    ,   17    ,   17  ,   17  ,   17  , 17,    17},
            /* 19 */ {107, 107,   107,  107 ,  107 ,   107 ,  113 ,  107 ,   107 ,   107  ,   107  ,   116  ,   107  ,   107 , 107   ,   107  ,   107   ,   107   ,   107   ,   107   ,   107   ,   107   ,   107   ,   107   ,   107   ,   107   ,   107 ,   107 ,   107 , 107,   107},
            /* 20 */ {114, 114,   114,  114 ,  114 ,   114 ,  114 ,  114 ,   114 ,   114  ,   114  ,   124  ,   114  ,   114 , 114   ,   114  ,   114   ,   114   ,   114   ,   114   ,   114   ,   114   ,   114   ,   114   ,   114   ,   114   ,   114 ,   114 ,   114 , 114,   114},
            /* 21 */ {120, 120,   120,  120 ,  120 ,   120 ,  120 ,  120 ,   120 ,   120  ,   120  ,   122  ,   120  ,   120 , 120   ,   123  ,   120   ,   120   ,   120   ,   120   ,   120   ,   120   ,   120   ,   120   ,   120   ,   120   ,   120 ,   120 ,   120 , 120,   120},
            /* 22 */ {119, 119,   119,  119 ,  119 ,   119 ,  119 ,  119 ,   119 ,   119  ,   119  ,   121  ,   119  ,   119 , 119   ,   119  ,   119   ,   119   ,   119   ,   119   ,   119   ,   119   ,   119   ,   119   ,   119   ,   119   ,   119 ,   119 ,   119 , 119,   119},
            /* 23 */ {-4 , -4 ,   -4 ,  -4  ,  -4  ,   -4  ,  -4  ,  -4  ,   -4  ,   -4   ,   -4   ,   -4   ,   -4   ,   -4  , -4    ,   -4   ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   26  ,   25  ,   24  ,  -4,    -4},
            /* 24 */ {-4 , -4 ,   -4 ,  126 ,  -4  ,   -4  ,  -4  ,  -4  ,   -4  ,   -4   ,   -4   ,   -4   ,   -4   ,   -4  , -4    ,   -4   ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4  ,   -4  ,   -4  ,  -4,    -4},
            /* 25 */ {-4 , -4 ,   -4 ,  125 ,  -4  ,   -4  ,  -4  ,  -4  ,   -4  ,   -4   ,   -4   ,   -4   ,   -4   ,   -4  , -4    ,   -4   ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4  ,   -4  ,   -4  ,  -4,    -4},
            /* 26 */ {-5 , -5 ,   -5 ,  -5  ,  -5  ,   -5  ,  -5  ,  -5  ,   -5  ,   -5   ,   -5   ,   -5   ,   -5   ,   -5  , -5    ,   -5   ,   -5    ,   -5    ,   -5    ,   -5    ,   -5    ,   -5    ,   -5    ,   -5    ,   -5    ,   -5    ,   -5  ,   27  ,   -5  ,  -5,    -5},
            /* 27 */ {-4 , -4 ,   -4 ,  127 ,  -4  ,   -4  ,  -4  ,  -4  ,   -4  ,   -4   ,   -4   ,   -4   ,   -4   ,   -4  , -4    ,   -4   ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4    ,   -4  ,   -4  ,   -4  ,  -4,    -4},
            /* 28 */ {108, 108,   108,  108 ,  108 ,   108 ,  108 ,  108 ,   108 ,   108  ,   108  ,   117  ,   108  ,   108 , 108   ,   108  ,   108   ,   108   ,   108   ,   108   ,   108   ,   108   ,   108   ,   108   ,   108   ,   108   ,   108 ,   108 ,   108 , 108,   108},
        };
            Console.WriteLine("Introduce una cadena:");
            string caracter = Console.ReadLine();
            int estadoActual = 0;
            int j = 0;
            string caracteres = "";
            int token = -1;
            while (j < caracter.Length)
            {
                char c = caracter[j];
                int columna = 0;

                // Determinar la columna correspondiente a la entrada actual
                if (c >= 'a' && c <= 'z')
                    columna = 0;
                else if (c >= '0' && c <= '9')
                    columna = 1;
                else if (c == '_')
                    columna = 2;
                else if (c == '.')
                    columna = 3;
                else if (c == 'E')
                    columna = 4;
                else if (c == '\'')
                    columna = 5;
                else if (c == '-')
                    columna = 6;
                else if (c == (char)26) // Carácter end of file
                    columna = 7;
                else if (c == '\n' || c == '\r') // Carácter end of line
                    columna = 8;
                else if (c == '"')
                    columna = 9;
                else if (c == '+')
                    columna = 10;
                else if (c == '=')
                    columna = 11;
                else if (c == '*')
                    columna = 12;
                else if (c == '/')
                    columna = 13;
                else if (c == '<')
                    columna = 14;
                else if (c == '>')
                    columna = 15;
                else if (c == '%')
                    columna = 16;
                else if (c == '^')
                    columna = 17;
                else if (c == '(')
                    columna = 18;
                else if (c == ')')
                    columna = 19;
                else if (c == '[')
                    columna = 20;
                else if (c == ']')
                    columna = 21;
                else if (c == '{')
                    columna = 22;
                else if (c == '}')
                    columna = 23;
                else if (c == ',')
                    columna = 24;
                else if (c == ';')
                    columna = 25;
                else if (c == '!') // NOT
                    columna = 26;
                else if (c == '|') // OR
                    columna = 27;
                else if (c == '&') // AND
                    columna = 28;
                else if (c == ' ') // Espacio en blanco
                    columna = 30;
                else
                    columna = 29; // Otra columna
               


                if (columna >= 0 && columna < matriz.GetLength(1)) 
                {
                    estadoActual = matriz[estadoActual, columna];
                    caracteres = caracteres + c;
                    token = estadoActual;
                }
                else
                {
                    Console.WriteLine($"Caracter: {c}, No reconocido");
                    break;
                }
                j++;
            }

            Console.WriteLine($"Caracteres: {caracteres}, Token: {token}");
            Console.Read();

        }
    }
}
